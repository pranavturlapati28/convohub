"""Enhanced models with edges, summaries, memories and DAG constraints

Revision ID: 0614cb1c0004
Revises: 2f18f69a554a
Create Date: 2025-08-20 12:05:35.179538

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0614cb1c0004'
down_revision: Union[str, Sequence[str], None] = '2f18f69a554a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('edges',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('from_message_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('to_message_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('edge_type', sa.String(length=20), nullable=False),
    sa.Column('weight', sa.String(length=10), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("edge_type IN ('parent','merge_parent','reference')", name='ck_edge_type'),
    sa.ForeignKeyConstraint(['from_message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('from_message_id', 'to_message_id', name='uq_edge_unique')
    )
    op.create_index('ix_edges_from', 'edges', ['from_message_id'], unique=False)
    op.create_index(op.f('ix_edges_from_message_id'), 'edges', ['from_message_id'], unique=False)
    op.create_index('ix_edges_to', 'edges', ['to_message_id'], unique=False)
    op.create_index(op.f('ix_edges_to_message_id'), 'edges', ['to_message_id'], unique=False)
    op.create_index('ix_edges_type', 'edges', ['edge_type'], unique=False)
    op.create_table('memories',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('thread_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('memory_type', sa.String(length=20), nullable=False),
    sa.Column('key', sa.String(length=100), nullable=False),
    sa.Column('value', sa.Text(), nullable=False),
    sa.Column('memory_metadata', sa.JSON(), nullable=True),
    sa.Column('confidence', sa.String(length=10), nullable=True),
    sa.Column('source', sa.String(length=50), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("memory_type IN ('fact','preference','context','relationship')", name='ck_memory_type'),
    sa.ForeignKeyConstraint(['thread_id'], ['threads.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('thread_id', 'key', name='uq_memory_thread_key')
    )
    op.create_index('ix_memories_expires', 'memories', ['expires_at'], unique=False)
    op.create_index('ix_memories_key', 'memories', ['key'], unique=False)
    op.create_index(op.f('ix_memories_thread_id'), 'memories', ['thread_id'], unique=False)
    op.create_index('ix_memories_thread_type', 'memories', ['thread_id', 'memory_type'], unique=False)
    op.create_table('summaries',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('thread_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('branch_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('summary_type', sa.String(length=20), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('summary_metadata', sa.JSON(), nullable=True),
    sa.Column('version', sa.String(length=10), nullable=False),
    sa.Column('is_current', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("summary_type IN ('thread','branch','conversation','topic')", name='ck_summary_type'),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], ),
    sa.ForeignKeyConstraint(['thread_id'], ['threads.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_summaries_branch', 'summaries', ['branch_id'], unique=False)
    op.create_index('ix_summaries_current', 'summaries', ['is_current'], unique=False)
    op.create_index(op.f('ix_summaries_thread_id'), 'summaries', ['thread_id'], unique=False)
    op.create_index('ix_summaries_thread_type', 'summaries', ['thread_id', 'summary_type'], unique=False)
    
    # Add columns as nullable first
    op.add_column('branches', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('branches', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.add_column('branches', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Update existing rows
    op.execute("UPDATE branches SET is_active = true, updated_at = created_at WHERE is_active IS NULL")
    
    # Make columns NOT NULL
    op.alter_column('branches', 'is_active', nullable=False)
    op.alter_column('branches', 'updated_at', nullable=False)
    
    op.create_index('ix_branches_thread_created', 'branches', ['thread_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_branches_thread_id'), 'branches', ['thread_id'], unique=False)
    op.create_unique_constraint('uq_branch_name_per_thread', 'branches', ['thread_id', 'name'])
    op.create_foreign_key(None, 'branches', 'messages', ['base_message_id'], ['id'])
    op.create_index('ix_idempotency_created', 'idempotency_records', ['created_at'], unique=False)
    op.create_unique_constraint('uq_idempotency_key_operation', 'idempotency_records', ['key', 'operation'])
    
    # Add columns as nullable first
    op.add_column('merges', sa.Column('conflict_resolution', sa.JSON(), nullable=True))
    op.add_column('merges', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Update existing rows
    op.execute("UPDATE merges SET updated_at = created_at WHERE updated_at IS NULL")
    
    # Make column NOT NULL
    op.alter_column('merges', 'updated_at', nullable=False)
    
    op.create_index('ix_merges_source', 'merges', ['source_branch_id'], unique=False)
    op.create_index('ix_merges_target', 'merges', ['target_branch_id'], unique=False)
    op.create_index('ix_merges_thread_created', 'merges', ['thread_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_merges_thread_id'), 'merges', ['thread_id'], unique=False)
    
    # Add columns as nullable first
    op.add_column('messages', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Update existing rows
    op.execute("UPDATE messages SET updated_at = created_at WHERE updated_at IS NULL")
    
    # Make column NOT NULL
    op.alter_column('messages', 'updated_at', nullable=False)
    
    op.create_index('ix_messages_branch_created', 'messages', ['branch_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_messages_branch_id'), 'messages', ['branch_id'], unique=False)
    op.create_index('ix_messages_parent', 'messages', ['parent_message_id'], unique=False)
    
    # Add columns as nullable first
    op.add_column('threads', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('threads', sa.Column('updated_at', sa.DateTime(), nullable=True))
    
    # Update existing rows
    op.execute("UPDATE threads SET updated_at = created_at WHERE updated_at IS NULL")
    
    # Make column NOT NULL
    op.alter_column('threads', 'updated_at', nullable=False)
    
    op.create_index('ix_threads_owner_created', 'threads', ['owner_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_threads_owner_id'), 'threads', ['owner_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_threads_owner_id'), table_name='threads')
    op.drop_index('ix_threads_owner_created', table_name='threads')
    op.drop_column('threads', 'updated_at')
    op.drop_column('threads', 'description')
    op.drop_index('ix_messages_parent', table_name='messages')
    op.drop_index(op.f('ix_messages_branch_id'), table_name='messages')
    op.drop_index('ix_messages_branch_created', table_name='messages')
    op.drop_column('messages', 'updated_at')
    op.drop_index(op.f('ix_merges_thread_id'), table_name='merges')
    op.drop_index('ix_merges_thread_created', table_name='merges')
    op.drop_index('ix_merges_target', table_name='merges')
    op.drop_index('ix_merges_source', table_name='merges')
    op.drop_column('merges', 'updated_at')
    op.drop_column('merges', 'conflict_resolution')
    op.drop_constraint('uq_idempotency_key_operation', 'idempotency_records', type_='unique')
    op.drop_index('ix_idempotency_created', table_name='idempotency_records')
    op.drop_constraint(None, 'branches', type_='foreignkey')
    op.drop_constraint('uq_branch_name_per_thread', 'branches', type_='unique')
    op.drop_index(op.f('ix_branches_thread_id'), table_name='branches')
    op.drop_index('ix_branches_thread_created', table_name='branches')
    op.drop_column('branches', 'updated_at')
    op.drop_column('branches', 'is_active')
    op.drop_column('branches', 'description')
    op.drop_index('ix_summaries_thread_type', table_name='summaries')
    op.drop_index(op.f('ix_summaries_thread_id'), table_name='summaries')
    op.drop_index('ix_summaries_current', table_name='summaries')
    op.drop_index('ix_summaries_branch', table_name='summaries')
    op.drop_table('summaries')
    op.drop_index('ix_memories_thread_type', table_name='memories')
    op.drop_index(op.f('ix_memories_thread_id'), table_name='memories')
    op.drop_index('ix_memories_key', table_name='memories')
    op.drop_index('ix_memories_expires', table_name='memories')
    op.drop_table('memories')
    op.drop_index('ix_edges_type', table_name='edges')
    op.drop_index(op.f('ix_edges_to_message_id'), table_name='edges')
    op.drop_index('ix_edges_to', table_name='edges')
    op.drop_index(op.f('ix_edges_from_message_id'), table_name='edges')
    op.drop_index('ix_edges_from', table_name='edges')
    op.drop_table('edges')
    # ### end Alembic commands ###
