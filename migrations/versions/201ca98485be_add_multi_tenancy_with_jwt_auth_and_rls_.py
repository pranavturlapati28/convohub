"""Add multi-tenancy with JWT auth and RLS support

Revision ID: 201ca98485be
Revises: 0614cb1c0004
Create Date: 2025-08-20 12:29:24.736023

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '201ca98485be'
down_revision: Union[str, Sequence[str], None] = '0614cb1c0004'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenants',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('domain', sa.String(length=100), nullable=True),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('domain')
    )
    op.create_index('ix_tenants_active', 'tenants', ['is_active'], unique=False)
    op.create_index('ix_tenants_domain', 'tenants', ['domain'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("role IN ('admin','user','guest')", name='ck_user_role'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'email', name='uq_user_email_per_tenant')
    )
    op.create_index('ix_users_active', 'users', ['is_active'], unique=False)
    op.create_index('ix_users_tenant_email', 'users', ['tenant_id', 'email'], unique=False)
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_table('thread_collaborators',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('thread_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint("role IN ('owner','editor','viewer')", name='ck_collaborator_role'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['thread_id'], ['threads.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('thread_id', 'user_id', name='uq_thread_collaborator')
    )
    op.create_index('ix_collaborators_active', 'thread_collaborators', ['is_active'], unique=False)
    op.create_index('ix_collaborators_thread_user', 'thread_collaborators', ['thread_id', 'user_id'], unique=False)
    op.create_index(op.f('ix_thread_collaborators_tenant_id'), 'thread_collaborators', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_thread_collaborators_thread_id'), 'thread_collaborators', ['thread_id'], unique=False)
    op.create_index(op.f('ix_thread_collaborators_user_id'), 'thread_collaborators', ['user_id'], unique=False)
    
    # Create default tenant and user for existing data
    default_tenant_id = "00000000-0000-0000-0000-000000000001"
    default_user_id = "00000000-0000-0000-0000-000000000001"
    
    op.execute(f"""
        INSERT INTO tenants (id, name, domain, settings, is_active, created_at, updated_at)
        VALUES ('{default_tenant_id}', 'Default Tenant', 'default.local', '{{}}', true, NOW(), NOW())
    """)
    
    op.execute(f"""
        INSERT INTO users (id, tenant_id, email, name, role, permissions, is_active, created_at, updated_at)
        VALUES ('{default_user_id}', '{default_tenant_id}', 'admin@default.local', 'Default Admin', 'admin', '["*"]', true, NOW(), NOW())
    """)
    
    # Add tenant_id columns as nullable first
    op.add_column('branches', sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=True))
    op.add_column('edges', sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=True))
    op.add_column('idempotency_records', sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=True))
    op.add_column('messages', sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=True))
    op.add_column('threads', sa.Column('tenant_id', sa.UUID(as_uuid=False), nullable=True))
    
    # Update existing records with default tenant
    op.execute(f"UPDATE branches SET tenant_id = '{default_tenant_id}' WHERE tenant_id IS NULL")
    op.execute(f"UPDATE edges SET tenant_id = '{default_tenant_id}' WHERE tenant_id IS NULL")
    op.execute(f"UPDATE idempotency_records SET tenant_id = '{default_tenant_id}' WHERE tenant_id IS NULL")
    op.execute(f"UPDATE messages SET tenant_id = '{default_tenant_id}' WHERE tenant_id IS NULL")
    op.execute(f"UPDATE threads SET tenant_id = '{default_tenant_id}' WHERE tenant_id IS NULL")
    
    # Update threads owner_id to reference the default user
    op.execute(f"UPDATE threads SET owner_id = '{default_user_id}' WHERE owner_id IS NULL OR owner_id = '00000000-0000-0000-0000-000000000001'")
    
    # Make columns NOT NULL
    op.alter_column('branches', 'tenant_id', nullable=False)
    op.alter_column('edges', 'tenant_id', nullable=False)
    op.alter_column('idempotency_records', 'tenant_id', nullable=False)
    op.alter_column('messages', 'tenant_id', nullable=False)
    op.alter_column('threads', 'tenant_id', nullable=False)
    
    # Create indexes and foreign keys
    op.create_index(op.f('ix_branches_tenant_id'), 'branches', ['tenant_id'], unique=False)
    op.create_index('ix_branches_tenant_thread', 'branches', ['tenant_id', 'thread_id'], unique=False)
    op.create_foreign_key(None, 'branches', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    
    op.create_index('ix_edges_tenant', 'edges', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_edges_tenant_id'), 'edges', ['tenant_id'], unique=False)
    op.create_foreign_key(None, 'edges', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    
    op.drop_constraint(op.f('uq_idempotency_key_operation'), 'idempotency_records', type_='unique')
    op.create_index(op.f('ix_idempotency_records_tenant_id'), 'idempotency_records', ['tenant_id'], unique=False)
    op.create_index('ix_idempotency_tenant', 'idempotency_records', ['tenant_id'], unique=False)
    op.create_unique_constraint('uq_idempotency_tenant_key_operation', 'idempotency_records', ['tenant_id', 'key', 'operation'])
    op.create_foreign_key(None, 'idempotency_records', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    
    op.create_index('ix_messages_tenant_branch', 'messages', ['tenant_id', 'branch_id'], unique=False)
    op.create_index(op.f('ix_messages_tenant_id'), 'messages', ['tenant_id'], unique=False)
    op.create_foreign_key(None, 'messages', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    
    op.drop_index(op.f('ix_threads_owner_created'), table_name='threads')
    op.create_index('ix_threads_tenant_created', 'threads', ['tenant_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_threads_tenant_id'), 'threads', ['tenant_id'], unique=False)
    op.create_index('ix_threads_tenant_owner', 'threads', ['tenant_id', 'owner_id'], unique=False)
    op.create_foreign_key(None, 'threads', 'users', ['owner_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'threads', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'threads', type_='foreignkey')
    op.drop_constraint(None, 'threads', type_='foreignkey')
    op.drop_index('ix_threads_tenant_owner', table_name='threads')
    op.drop_index(op.f('ix_threads_tenant_id'), table_name='threads')
    op.drop_index('ix_threads_tenant_created', table_name='threads')
    op.create_index(op.f('ix_threads_owner_created'), 'threads', ['owner_id', 'created_at'], unique=False)
    op.drop_column('threads', 'tenant_id')
    op.drop_constraint(None, 'messages', type_='foreignkey')
    op.drop_index(op.f('ix_messages_tenant_id'), table_name='messages')
    op.drop_index('ix_messages_tenant_branch', table_name='messages')
    op.drop_column('messages', 'tenant_id')
    op.drop_constraint(None, 'idempotency_records', type_='foreignkey')
    op.drop_constraint('uq_idempotency_tenant_key_operation', 'idempotency_records', type_='unique')
    op.drop_index('ix_idempotency_tenant', table_name='idempotency_records')
    op.drop_index(op.f('ix_idempotency_records_tenant_id'), table_name='idempotency_records')
    op.create_unique_constraint(op.f('uq_idempotency_key_operation'), 'idempotency_records', ['key', 'operation'], postgresql_nulls_not_distinct=False)
    op.drop_column('idempotency_records', 'tenant_id')
    op.drop_constraint(None, 'edges', type_='foreignkey')
    op.drop_index(op.f('ix_edges_tenant_id'), table_name='edges')
    op.drop_index('ix_edges_tenant', table_name='edges')
    op.drop_column('edges', 'tenant_id')
    op.drop_constraint(None, 'branches', type_='foreignkey')
    op.drop_index('ix_branches_tenant_thread', table_name='branches')
    op.drop_index(op.f('ix_branches_tenant_id'), table_name='branches')
    op.drop_column('branches', 'tenant_id')
    op.drop_index(op.f('ix_thread_collaborators_user_id'), table_name='thread_collaborators')
    op.drop_index(op.f('ix_thread_collaborators_thread_id'), table_name='thread_collaborators')
    op.drop_index(op.f('ix_thread_collaborators_tenant_id'), table_name='thread_collaborators')
    op.drop_index('ix_collaborators_thread_user', table_name='thread_collaborators')
    op.drop_index('ix_collaborators_active', table_name='thread_collaborators')
    op.drop_table('thread_collaborators')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index('ix_users_tenant_email', table_name='users')
    op.drop_index('ix_users_active', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_tenants_domain', table_name='tenants')
    op.drop_index('ix_tenants_active', table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###
